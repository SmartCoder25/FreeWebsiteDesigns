<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service Optimization Dashboard</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="https://unpkg.com/recharts@2.8.0/umd/Recharts.js"></script>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;
        const { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } = Recharts;

        // API service - UPDATED to match your backend schema
        const apiService = {
            baseURL: 'http://localhost:8000',
            
            async submitForm(data) {
                try {
                    // Transform frontend data to match backend schema
                    const payload = {
                        service_name: data.serviceName,
                        parameter_to_optimize: data.parameterToOptimize,
                        duration_in_days: data.durationInDays
                    };
                    
                    console.log('Sending payload:', payload);
                    
                    const response = await axios.post(`${this.baseURL}/api/process`, payload, {
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        timeout: 30000 // 30 second timeout
                    });
                    
                    console.log('Response received:', response.data);
                    return response.data;
                } catch (error) {
                    console.error('API Error:', error);
                    
                    if (error.code === 'ECONNREFUSED' || error.code === 'ERR_NETWORK') {
                        throw new Error('Cannot connect to backend server. Make sure it\'s running on http://localhost:8000');
                    }
                    
                    throw new Error(error.response?.data?.detail || error.message || 'Failed to process request');
                }
            },
            
            async checkHealth() {
                try {
                    const response = await axios.get(`${this.baseURL}/health`);
                    return response.data;
                } catch (error) {
                    throw new Error('Backend server is not responding');
                }
            }
        };

        // Form Component - UPDATED with better validation
        const ServiceForm = ({ onSubmit, isLoading }) => {
            const [formData, setFormData] = useState({
                serviceName: '',
                parameterToOptimize: 'response_time', // Default value
                durationInDays: '30' // Default value
            });
            
            const [errors, setErrors] = useState({});
            const [backendStatus, setBackendStatus] = useState('checking');

            // Check backend status on component mount
            useEffect(() => {
                checkBackendHealth();
            }, []);

            const checkBackendHealth = async () => {
                try {
                    await apiService.checkHealth();
                    setBackendStatus('connected');
                } catch (error) {
                    setBackendStatus('disconnected');
                }
            };

            const allowedParameters = [
                'response_time', 'cpu_usage', 'memory_usage', 'disk_io', 
                'network_io', 'error_rate', 'throughput', 'latency'
            ];

            const handleChange = (e) => {
                const { name, value } = e.target;
                setFormData(prev => ({
                    ...prev,
                    [name]: value
                }));
                
                // Clear error when user starts typing
                if (errors[name]) {
                    setErrors(prev => ({
                        ...prev,
                        [name]: ''
                    }));
                }
            };

            const validateForm = () => {
                const newErrors = {};
                
                if (!formData.serviceName.trim()) {
                    newErrors.serviceName = 'Service name is required';
                } else if (formData.serviceName.length > 100) {
                    newErrors.serviceName = 'Service name must be less than 100 characters';
                }
                
                if (!formData.parameterToOptimize.trim()) {
                    newErrors.parameterToOptimize = 'Parameter to optimize is required';
                } else if (!allowedParameters.includes(formData.parameterToOptimize)) {
                    newErrors.parameterToOptimize = `Parameter must be one of: ${allowedParameters.join(', ')}`;
                }
                
                if (!formData.durationInDays) {
                    newErrors.durationInDays = 'Duration is required';
                } else {
                    const duration = parseInt(formData.durationInDays);
                    if (isNaN(duration) || duration <= 0) {
                        newErrors.durationInDays = 'Duration must be a positive number';
                    } else if (duration > 365) {
                        newErrors.durationInDays = 'Duration cannot exceed 365 days';
                    }
                }
                
                setErrors(newErrors);
                return Object.keys(newErrors).length === 0;
            };

            const handleSubmit = (e) => {
                e.preventDefault();
                if (validateForm()) {
                    onSubmit({
                        serviceName: formData.serviceName.trim(),
                        parameterToOptimize: formData.parameterToOptimize,
                        durationInDays: parseInt(formData.durationInDays)
                    });
                }
            };

            return (
                <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-gray-800 mb-2">Service Optimization</h2>
                        <p className="text-gray-600">Configure your optimization parameters</p>
                        
                        {/* Backend Status Indicator */}
                        <div className="mt-4 flex items-center justify-center">
                            <div className={`w-3 h-3 rounded-full mr-2 ${
                                backendStatus === 'connected' ? 'bg-green-500' : 
                                backendStatus === 'disconnected' ? 'bg-red-500' : 'bg-yellow-500'
                            }`}></div>
                            <span className={`text-sm ${
                                backendStatus === 'connected' ? 'text-green-600' : 
                                backendStatus === 'disconnected' ? 'text-red-600' : 'text-yellow-600'
                            }`}>
                                {backendStatus === 'connected' ? 'Backend Connected' : 
                                 backendStatus === 'disconnected' ? 'Backend Disconnected' : 'Checking...'}
                            </span>
                        </div>
                    </div>
                    
                    <form onSubmit={handleSubmit} className="space-y-6">
                        <div>
                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                Service Name
                            </label>
                            <input
                                type="text"
                                name="serviceName"
                                value={formData.serviceName}
                                onChange={handleChange}
                                placeholder="e.g., user-authentication-service"
                                className={`w-full px-4 py-3 border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                                    errors.serviceName ? 'border-red-500' : 'border-gray-300'
                                }`}
                            />
                            {errors.serviceName && (
                                <p className="text-red-500 text-sm mt-1">{errors.serviceName}</p>
                            )}
                        </div>

                        <div>
                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                Parameter to Optimize
                            </label>
                            <select
                                name="parameterToOptimize"
                                value={formData.parameterToOptimize}
                                onChange={handleChange}
                                className={`w-full px-4 py-3 border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                                    errors.parameterToOptimize ? 'border-red-500' : 'border-gray-300'
                                }`}
                            >
                                {allowedParameters.map(param => (
                                    <option key={param} value={param}>
                                        {param.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                                    </option>
                                ))}
                            </select>
                            {errors.parameterToOptimize && (
                                <p className="text-red-500 text-sm mt-1">{errors.parameterToOptimize}</p>
                            )}
                        </div>

                        <div>
                            <label className="block text-sm font-semibold text-gray-700 mb-2">
                                Duration (Days)
                            </label>
                            <input
                                type="number"
                                name="durationInDays"
                                value={formData.durationInDays}
                                onChange={handleChange}
                                placeholder="e.g., 30"
                                min="1"
                                max="365"
                                className={`w-full px-4 py-3 border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                                    errors.durationInDays ? 'border-red-500' : 'border-gray-300'
                                }`}
                            />
                            {errors.durationInDays && (
                                <p className="text-red-500 text-sm mt-1">{errors.durationInDays}</p>
                            )}
                        </div>

                        <button
                            type="submit"
                            disabled={isLoading || backendStatus === 'disconnected'}
                            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                        >
                            {isLoading ? (
                                <div className="flex items-center justify-center">
                                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                                    Processing...
                                </div>
                            ) : backendStatus === 'disconnected' ? (
                                'Backend Unavailable'
                            ) : (
                                'Start Optimization'
                            )}
                        </button>
                    </form>
                </div>
            );
        };

        // Results Display Component - NEW
        const ResultsDisplay = ({ results }) => {
            if (!results) return null;

            return (
                <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-4xl w-full mt-8">
                    <h3 className="text-2xl font-bold text-gray-800 mb-6">Optimization Results</h3>
                    
                    {/* Insights */}
                    {results.insights && results.insights.length > 0 && (
                        <div className="mb-6">
                            <h4 className="text-lg font-semibold text-gray-700 mb-3">Insights</h4>
                            <div className="space-y-3">
                                {results.insights.map((insight, index) => (
                                    <div key={index} className={`p-4 rounded-lg border-l-4 ${
                                        insight.type === 'improvement' ? 'bg-green-50 border-green-500' :
                                        insight.type === 'warning' ? 'bg-yellow-50 border-yellow-500' :
                                        'bg-blue-50 border-blue-500'
                                    }`}>
                                        <p className="text-gray-800">{insight.message}</p>
                                        <span className="text-sm text-gray-600">Impact Score: {insight.impact_score}/10</span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Recommendations */}
                    {results.recommendations && results.recommendations.length > 0 && (
                        <div>
                            <h4 className="text-lg font-semibold text-gray-700 mb-3">Recommendations</h4>
                            <div className="space-y-3">
                                {results.recommendations.map((rec, index) => (
                                    <div key={index} className={`p-4 rounded-lg ${
                                        rec.priority === 'high' ? 'bg-red-50 border border-red-200' :
                                        rec.priority === 'medium' ? 'bg-yellow-50 border border-yellow-200' :
                                        'bg-gray-50 border border-gray-200'
                                    }`}>
                                        <div className="flex items-start justify-between">
                                            <div className="flex-1">
                                                <span className={`inline-block px-2 py-1 rounded text-xs font-medium mb-2 ${
                                                    rec.priority === 'high' ? 'bg-red-100 text-red-800' :
                                                    rec.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                                    'bg-gray-100 text-gray-800'
                                                }`}>
                                                    {rec.priority.toUpperCase()} PRIORITY
                                                </span>
                                                <p className="text-gray-800 mb-2">{rec.action}</p>
                                                <div className="text-sm text-gray-600">
                                                    <p><strong>Expected Improvement:</strong> {rec.expected_improvement}</p>
                                                    <p><strong>Effort Required:</strong> {rec.effort_required}</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            );
        };

        // Graph Component - UPDATED to handle real data structure
        const OptimizationGraph = ({ data }) => {
            if (!data || !data.length) {
                return (
                    <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-4xl w-full">
                        <div className="text-center py-12">
                            <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
                                📊
                            </div>
                            <h3 className="text-xl font-semibold text-gray-700 mb-2">No Data Available</h3>
                            <p className="text-gray-500">Submit the form to view optimization results</p>
                        </div>
                    </div>
                );
            }

            // Transform data for chart (handle both mock and real data formats)
            const chartData = data.map(point => ({
                day: point.day,
                value: typeof point.value === 'number' ? point.value : parseFloat(point.value) || 0,
                status: point.status || 'normal'
            }));

            return (
                <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-4xl w-full">
                    <div className="mb-6">
                        <h3 className="text-2xl font-bold text-gray-800 mb-2">Performance Metrics</h3>
                        <p className="text-gray-600">Optimization progress over time</p>
                    </div>
                    
                    <div className="h-96">
                        <ResponsiveContainer width="100%" height="100%">
                            <LineChart data={chartData}>
                                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                                <XAxis 
                                    dataKey="day" 
                                    stroke="#666"
                                    tick={{ fill: '#666' }}
                                    label={{ value: 'Day', position: 'insideBottom', offset: -5 }}
                                />
                                <YAxis 
                                    stroke="#666"
                                    tick={{ fill: '#666' }}
                                    label={{ value: 'Value', angle: -90, position: 'insideLeft' }}
                                />
                                <Tooltip 
                                    contentStyle={{
                                        background: '#fff',
                                        border: '1px solid #e2e8f0',
                                        borderRadius: '8px',
                                        boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                                    }}
                                />
                                <Legend />
                                <Line 
                                    type="monotone" 
                                    dataKey="value" 
                                    stroke="#8884d8" 
                                    strokeWidth={3}
                                    dot={{ fill: '#8884d8', strokeWidth: 2, r: 6 }}
                                    activeDot={{ r: 8, stroke: '#8884d8', strokeWidth: 2 }}
                                    name="Performance Metric"
                                />
                            </LineChart>
                        </ResponsiveContainer>
                    </div>
                </div>
            );
        };

        // Main App Component - UPDATED to handle real backend responses
        const App = () => {
            const [isLoading, setIsLoading] = useState(false);
            const [results, setResults] = useState(null);
            const [error, setError] = useState('');
            const [success, setSuccess] = useState('');

            const handleFormSubmit = async (formData) => {
                setIsLoading(true);
                setError('');
                setSuccess('');
                setResults(null);
                
                try {
                    console.log('Submitting form with data:', formData);
                    
                    // Make actual API call to backend
                    const result = await apiService.submitForm(formData);
                    
                    console.log('Received result:', result);
                    
                    setResults(result);
                    setSuccess(result.message || `Optimization analysis completed for ${formData.serviceName}`);
                    
                } catch (err) {
                    console.error('Form submission error:', err);
                    setError(err.message);
                } finally {
                    setIsLoading(false);
                }
            };

            return (
                <div className="min-h-screen flex flex-col items-center justify-center p-4 space-y-8">
                    <div className="text-center mb-8">
                        <h1 className="text-5xl font-bold text-white mb-4">
                            Service Performance Optimizer
                        </h1>
                        <p className="text-xl text-white opacity-90">
                            Analyze and optimize your services with Datadog integration
                        </p>
                    </div>
                    
                    {error && (
                        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg max-w-4xl w-full">
                            <strong className="font-bold">Error: </strong>
                            <span>{error}</span>
                            <button 
                                onClick={() => setError('')}
                                className="float-right text-red-700 hover:text-red-900"
                            >
                                ×
                            </button>
                        </div>
                    )}
                    
                    {success && (
                        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg max-w-4xl w-full">
                            <strong className="font-bold">Success: </strong>
                            <span>{success}</span>
                            <button 
                                onClick={() => setSuccess('')}
                                className="float-right text-green-700 hover:text-green-900"
                            >
                                ×
                            </button>
                        </div>
                    )}
                    
                    <ServiceForm onSubmit={handleFormSubmit} isLoading={isLoading} />
                    
                    {results && results.data && (
                        <OptimizationGraph data={results.data} />
                    )}
                    
                    {results && (
                        <ResultsDisplay results={results} />
                    )}
                    
                    <footer className="text-white opacity-75 text-center">
                        <p>Built with React, FastAPI, and Datadog integration</p>
                    </footer>
                </div>
            );
        };

        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
